---
layout: post
title:  "R 프로그래밍 - 데이터 프레임"
---

### 데이터 프레임?

데이터 프레임은 행과 열로 구성된 표 모양의 데이터 형태이다. RDB의 table 형태라고 생각하면 될 것 같다.

데이터 프레임을 만드는 함수는 data.frame() 이다.

{% highlight ruby %}

english <- c(90, 30, 70, 50)

math <- c(50, 60, 80, 90)

class <- c(1,1,2,2)

df_midterm <- data.frame(english, math,class) 

df_midterm # df를 붙이면 다른 변수와 구분이 용이하다.

{% endhighlight %}

한번에 만드려면

{% highlight ruby %}

df_midterm <- data.frame(english = c(90, 30, 70, 50),
		  	  math = c(50, 60, 80, 90),
	  		  class = c(1,1,2,2))
{% endhighlight %}

**데이터 프레임 분석하기**
{% highlight ruby %}
mean(df_midterm$english) # $: 데이터 프레임 안의 변수를 지정할때 사용 
{% endhighlight %}

Excel, CSV 등 데이터시트 파일을 불러와 데이터프레임을 만들 수 있다.

Excel파일을 불러오기 위해서는 'readxl' 패키지가 필요하다.

{% highlight ruby %}

install.packages("readxl")

library(readxl)

{% endhighlight %}

**Excel File 불러오기**

{% highlight ruby %}

df_exam <- read_excel("R_example.xlsx")# 프로젝트 폴더의 파일 뿐 아니라 경로지정으로 다른 폴더의 파일도 지정 가능하다.

df_exam2 <- read_excel("R_example.xlsx" , col_names = F) # 첫번째 행을 변수명이 아닌 데이터로 인식해 불러온다.

df_exam_sheet <- read_excel("R_example.xlsx" , sheet = 3) #여러 개의 시트가 있는 경우, 엑셀 파일의 세번째 시트에 있는 데이터를 불러온다.

{% endhighlight %}

CSV 파일은 R에 내장된 read.csv()를 사용하여 불러올 수 있다.

{% highlight ruby %}

df_csv_exam1 = read.csv("csv_exam.csv")

df_csv_exam2 = read.csv("csv_exam.csv" , header = F) # 첫번째 행을 변수명이 아닌 데이터로 인식해 불러온다.

df_csv_exam3 = read.csv("csv_exam.csv", stringsAsFactors = F) # 데이터를 factor타입이 아닌 문자 타입으로 불러온다.

{% endhighlight %}

데이터 프레임을 CSV파일로 저장하려면 R에 내장된 write.csv()를 사용하면 된다.

{% highlight ruby %}

write.csv(df_csv_exam1, file="df_csv_exam1.csv")

{% endhighlight %}

R 전용 데이터 파일인 RData(.rda, .rdata)을 사용하면 R에서 일고 쓰는 속도가 빠르고 용량이 작다.

{% highlight ruby %}

save(df_csv_exam1, file = "df_csv_exam1.rda") # RData File로 저장

load("df_csv_exam1.rda") # RData File 로드 , 자동으로 새 변수에 할당된다.

{% endhighlight %}

데이터프레임을 삭제하려면 rm()을 사용한다.

{% highlight ruby %}

rm(df_csv_exam1)

{% endhighlight %}
